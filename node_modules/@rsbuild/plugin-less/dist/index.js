import * as __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__ from "node:path";
import * as __WEBPACK_EXTERNAL_MODULE_node_url_e96de089__ from "node:url";
import * as __WEBPACK_EXTERNAL_MODULE_deepmerge__ from "deepmerge";
import * as __WEBPACK_EXTERNAL_MODULE_reduce_configs_02786df6__ from "reduce-configs";
let src_dirname = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.default.dirname((0, __WEBPACK_EXTERNAL_MODULE_node_url_e96de089__.fileURLToPath)(import.meta.url)), isPlainObject = (obj)=>null !== obj && 'object' == typeof obj && Object.getPrototypeOf(obj) === Object.prototype, PLUGIN_LESS_NAME = 'rsbuild:less', getLessLoaderOptions = (userOptions, isUseCssSourceMap, rootPath)=>{
    let excludes = [], defaultLessLoaderOptions = {
        lessOptions: {
            javascriptEnabled: !0,
            paths: [
                __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.default.join(rootPath, 'node_modules')
            ]
        },
        sourceMap: isUseCssSourceMap,
        implementation: __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.default.join(src_dirname, '../compiled/less/index.js')
    };
    return {
        options: (0, __WEBPACK_EXTERNAL_MODULE_reduce_configs_02786df6__.reduceConfigsWithContext)({
            initial: defaultLessLoaderOptions,
            config: userOptions,
            ctx: {
                addExcludes: (items)=>{
                    excludes.push(...Array.isArray(items) ? items : [
                        items
                    ]);
                }
            },
            mergeFn: (defaults, userOptions)=>({
                    ...defaults,
                    ...userOptions,
                    lessOptions: defaults.lessOptions && userOptions.lessOptions ? (0, __WEBPACK_EXTERNAL_MODULE_deepmerge__.default)(defaults.lessOptions, userOptions.lessOptions, {
                        isMergeableObject: isPlainObject
                    }) : userOptions.lessOptions || defaults.lessOptions
                })
        }),
        excludes
    };
}, findRuleId = (chain, defaultId)=>{
    let id = defaultId, index = 0;
    for(; chain.module.rules.has(id);)id = `${defaultId}-${++index}`;
    return id;
}, pluginLess = (pluginOptions = {})=>({
        name: PLUGIN_LESS_NAME,
        setup (api) {
            api.modifyBundlerChain(async (chain, { CHAIN_ID, environment })=>{
                let { config } = environment, ruleId = findRuleId(chain, CHAIN_ID.RULE.LESS), rule = chain.module.rule(ruleId).test(pluginOptions.include ?? /\.less$/).merge({
                    sideEffects: !0
                }).resolve.preferRelative(!0).end(), { sourceMap } = config.output, { excludes, options } = getLessLoaderOptions(pluginOptions.lessLoaderOptions, 'boolean' == typeof sourceMap ? sourceMap : sourceMap.css, api.context.rootPath);
                for (let item of excludes)rule.exclude.add(item);
                pluginOptions.exclude && rule.exclude.add(pluginOptions.exclude);
                let cssRule = chain.module.rules.get(CHAIN_ID.RULE.CSS);
                for (let id of (rule.dependency(cssRule.get('dependency')), Object.keys(cssRule.uses.entries()))){
                    let loader = cssRule.uses.get(id), options = loader.get('options') ?? {}, clonedOptions = (0, __WEBPACK_EXTERNAL_MODULE_deepmerge__.default)({}, options);
                    id === CHAIN_ID.USE.CSS && (clonedOptions.importLoaders += 1), rule.use(id).loader(loader.get('loader')).options(clonedOptions);
                }
                rule.use(CHAIN_ID.USE.LESS).loader(__WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.default.join(src_dirname, '../compiled/less-loader/index.js')).options(options);
            });
        }
    });
export { PLUGIN_LESS_NAME, isPlainObject, pluginLess };
