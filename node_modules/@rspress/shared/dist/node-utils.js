"use strict";
var __webpack_modules__ = {
    "lodash-es": function(module) {
        module.exports = import("lodash-es");
    }
};
var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (void 0 !== cachedModule) return cachedModule.exports;
    var module = __webpack_module_cache__[moduleId] = {
        exports: {}
    };
    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    return module.exports;
}
(()=>{
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function() {
            return module['default'];
        } : function() {
            return module;
        };
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = function(exports1, definition) {
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = function(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    };
})();
(()=>{
    __webpack_require__.r = function(exports1) {
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
(()=>{
    __webpack_require__.r(__webpack_exports__);
    __webpack_require__.d(__webpack_exports__, {
        extractTextAndId: ()=>extractTextAndId,
        loadFrontMatter: ()=>loadFrontMatter,
        getNodeAttribute: ()=>getNodeAttribute,
        mergeDocConfig: ()=>mergeDocConfig
    });
    const extractTextAndId = (title)=>{
        if (!title) return [
            '',
            ''
        ];
        const customIdReg = /\\?{#.*}/;
        const text = title.replace(customIdReg, '').trimEnd();
        const customId = title.match(customIdReg)?.[0]?.slice(2, -1) || '';
        return [
            text,
            customId
        ];
    };
    function getNodeAttribute(node, attrName, attribute) {
        const found = node.attributes.find((attr)=>'name' in attr && attr.name === attrName);
        return attribute ? found : found?.value;
    }
    const external_node_path_namespaceObject = require("node:path");
    var external_node_path_default = /*#__PURE__*/ __webpack_require__.n(external_node_path_namespaceObject);
    const external_gray_matter_namespaceObject = require("gray-matter");
    var external_gray_matter_default = /*#__PURE__*/ __webpack_require__.n(external_gray_matter_namespaceObject);
    const core_namespaceObject = require("@rsbuild/core");
    function loadFrontMatter(source, filepath, root, outputWarning = false) {
        try {
            const { content, data } = external_gray_matter_default()(source);
            return {
                content,
                frontmatter: data
            };
        } catch (e) {
            if (outputWarning) core_namespaceObject.logger.warn(`Parse frontmatter error in ${external_node_path_default().relative(root, filepath)}: \n`, e);
        }
        return {
            content: '',
            frontmatter: {}
        };
    }
    const castArray = (value)=>Array.isArray(value) ? value : [
            value
        ];
    const mergeDocConfig = async (...configs)=>{
        const { mergeWith } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "lodash-es"));
        return mergeWith({}, ...configs, (target, source)=>{
            const pair = [
                target,
                source
            ];
            if (pair.some((item)=>void 0 === item)) return;
            if (pair.some((item)=>Array.isArray(item))) return [
                ...castArray(target),
                ...castArray(source)
            ];
        });
    };
})();
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});
