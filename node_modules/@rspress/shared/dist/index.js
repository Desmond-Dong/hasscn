"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = function(exports1, definition) {
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = function(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    };
})();
(()=>{
    __webpack_require__.r = function(exports1) {
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    SEARCH_INDEX_NAME: ()=>SEARCH_INDEX_NAME,
    RSPRESS_TEMP_DIR: ()=>RSPRESS_TEMP_DIR,
    QUERY_REGEXP: ()=>QUERY_REGEXP,
    isDebugMode: ()=>isDebugMode,
    addTrailingSlash: ()=>addTrailingSlash,
    slash: ()=>slash,
    removeLeadingSlash: ()=>removeLeadingSlash,
    withoutBase: ()=>withoutBase,
    replaceVersion: ()=>replaceVersion,
    HASH_REGEXP: ()=>HASH_REGEXP,
    isSCM: ()=>isSCM,
    MDX_OR_MD_REGEXP: ()=>MDX_OR_MD_REGEXP,
    normalizeHref: ()=>normalizeHref,
    normalizeSlash: ()=>normalizeSlash,
    normalizePosixPath: ()=>normalizePosixPath,
    inBrowser: ()=>inBrowser,
    isDataUrl: ()=>isDataUrl,
    replaceLang: ()=>replaceLang,
    removeHash: ()=>removeHash,
    cleanUrl: ()=>runtime_utils_cleanUrl,
    withBase: ()=>withBase,
    isDevDebugMode: ()=>isDevDebugMode,
    removeTrailingSlash: ()=>removeTrailingSlash,
    APPEARANCE_KEY: ()=>APPEARANCE_KEY,
    isExternalUrl: ()=>isExternalUrl,
    removeBase: ()=>removeBase,
    DEFAULT_HIGHLIGHT_LANGUAGES: ()=>DEFAULT_HIGHLIGHT_LANGUAGES,
    parseUrl: ()=>parseUrl,
    withoutLang: ()=>withoutLang,
    isProduction: ()=>isProduction,
    addLeadingSlash: ()=>addLeadingSlash
});
const QUERY_REGEXP = /\?.*$/s;
const HASH_REGEXP = /#.*$/s;
const MDX_OR_MD_REGEXP = /\.mdx?$/;
const APPEARANCE_KEY = 'rspress-theme-appearance';
const SEARCH_INDEX_NAME = 'search_index';
const RSPRESS_TEMP_DIR = '.rspress';
const DEFAULT_HIGHLIGHT_LANGUAGES = [
    [
        'js',
        "javascript"
    ],
    [
        'ts',
        "typescript"
    ],
    [
        'jsx',
        'tsx'
    ],
    [
        'xml',
        'xml-doc'
    ],
    [
        'md',
        'markdown'
    ],
    [
        'mdx',
        'tsx'
    ]
];
const isSCM = ()=>Boolean(process.env.BUILD_VERSION);
const isProduction = ()=>'production' === process.env.NODE_ENV;
const isDebugMode = ()=>{
    if (!process.env.DEBUG) return false;
    const values = process.env.DEBUG?.toLocaleLowerCase().split(',') ?? [];
    return [
        'rsbuild',
        'builder',
        '*'
    ].some((key)=>values.includes(key));
};
const isDevDebugMode = ()=>'rspress-dev' === process.env.DEBUG;
const runtime_utils_cleanUrl = (url)=>url.replace(HASH_REGEXP, '').replace(QUERY_REGEXP, '');
function slash(str) {
    return str.replace(/\\/g, '/');
}
function removeHash(str) {
    return str.replace(/#.*$/, '');
}
function normalizePosixPath(id) {
    const path = slash(id);
    const isAbsolutePath = path.startsWith('/');
    const parts = path.split('/');
    const normalizedParts = [];
    for (const part of parts)if ('.' === part || '' === part) ;
    else if ('..' === part) {
        if (normalizedParts.length > 0 && '..' !== normalizedParts[normalizedParts.length - 1]) normalizedParts.pop();
        else if (isAbsolutePath) normalizedParts.push('..');
    } else normalizedParts.push(part);
    let normalizedPath = normalizedParts.join('/');
    if (isAbsolutePath) normalizedPath = `/${normalizedPath}`;
    return normalizedPath;
}
const inBrowser = ()=>!process.env.__SSR__;
function addLeadingSlash(url) {
    return '/' === url.charAt(0) || isExternalUrl(url) ? url : `/${url}`;
}
function removeLeadingSlash(url) {
    return '/' === url.charAt(0) ? url.slice(1) : url;
}
function addTrailingSlash(url) {
    return '/' === url.charAt(url.length - 1) ? url : `${url}/`;
}
function removeTrailingSlash(url) {
    return '/' === url.charAt(url.length - 1) ? url.slice(0, -1) : url;
}
function normalizeSlash(url) {
    return removeTrailingSlash(addLeadingSlash(normalizePosixPath(url)));
}
function isExternalUrl(url = '') {
    return url.startsWith('http://') || url.startsWith('https://') || url.startsWith('mailto:') || url.startsWith('tel:');
}
function isDataUrl(url = '') {
    return /^\s*data:/i.test(url);
}
function replaceLang(rawUrl, lang, version, base = '', cleanUrls = false, isPageNotFound = false) {
    let url = removeBase(rawUrl, base);
    if (!url || isPageNotFound) url = cleanUrls ? '/index' : '/index.html';
    if (url.endsWith('/')) url += cleanUrls ? '/index' : '/index.html';
    let versionPart = '';
    let langPart = '';
    let purePathPart = '';
    const parts = url.split('/').filter(Boolean);
    if (version.current && version.current !== version.default) versionPart = parts.shift() || '';
    if (lang.target !== lang.default) {
        langPart = lang.target;
        if (lang.current !== lang.default) parts.shift();
    } else parts.shift();
    purePathPart = parts.join('/') || '';
    if ((versionPart || langPart) && !purePathPart) purePathPart = cleanUrls ? 'index' : 'index.html';
    return withBase(addLeadingSlash([
        versionPart,
        langPart,
        purePathPart
    ].filter(Boolean).join('/')), base);
}
function replaceVersion(rawUrl, version, base = '', cleanUrls = false, isPageNotFound = false) {
    let url = removeBase(rawUrl, base);
    if (!url || isPageNotFound) url = cleanUrls ? '/index' : '/index.html';
    let versionPart = '';
    const parts = url.split('/').filter(Boolean);
    if (version.target !== version.default) {
        versionPart = version.target;
        if (version.current !== version.default) parts.shift();
    } else parts.shift();
    let restPart = parts.join('/') || '';
    if (versionPart && !restPart) restPart = cleanUrls ? 'index' : 'index.html';
    return withBase(addLeadingSlash([
        versionPart,
        restPart
    ].filter(Boolean).join('/')), base);
}
const parseUrl = (url)=>{
    const [withoutHash, hash = ''] = url.split('#');
    return {
        url: withoutHash,
        hash
    };
};
function normalizeHref(url, cleanUrls = false) {
    if (!url) return '/';
    if (isExternalUrl(url)) return url;
    let { url: cleanUrl, hash } = parseUrl(decodeURIComponent(url));
    if (!cleanUrls && !cleanUrl.endsWith('.html')) {
        if (cleanUrl.endsWith('/')) cleanUrl += 'index.html';
        else cleanUrl += '.html';
    }
    if (cleanUrls && cleanUrl.endsWith('/')) cleanUrl += 'index';
    if (cleanUrls && cleanUrl.endsWith('.html')) cleanUrl = cleanUrl.replace(/\.html$/, '');
    return addLeadingSlash(hash ? `${cleanUrl}#${hash}` : cleanUrl);
}
function withoutLang(path, langs) {
    const langRegexp = new RegExp(`^\\/(${langs.join('|')})`);
    return addLeadingSlash(path.replace(langRegexp, ''));
}
function withoutBase(path, base) {
    return addLeadingSlash(path).replace(normalizeSlash(base), '');
}
function withBase(url, base) {
    const normalizedUrl = addLeadingSlash(url);
    const normalizedBase = normalizeSlash(base);
    return normalizedUrl.startsWith(normalizedBase) ? normalizedUrl : `${normalizedBase}${normalizedUrl}`;
}
function removeBase(url, base) {
    return addLeadingSlash(url).replace(new RegExp(`^${normalizeSlash(base)}`), '');
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});
